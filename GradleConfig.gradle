ext{
    //自动化打包需要的配置
    //---------------------------------------------------------------------------------------------
    //提交对象（commit）的完整哈希字串
    gitCommitShortHash = 'git log -1 --pretty=%h'.execute([], project.rootDir).text.trim()
    gitCommitDate = 'git log -1 --pretty=%ci'.execute([], project.rootDir).text.trim().split()[0]
    gitShortShaDate = gitCommitShortHash + "_" + gitCommitDate
    //提交说明
    git = 'git log -1 --pretty=%s'.execute([], project.rootDir).text.trim()
    //获取历史提交信息
    gitHirsotry = 'git log -l --mergs --pretty=%s'.execute([], project.rootDir).text.trim()
    // Auto-incrementing commit count based on counting commits to HEAD (Build #543)
    gitCommitCount = Integer.parseInt('git rev-list HEAD --count'.execute([], project.rootDir).text.trim())
    // I want to use git tags as my version names (1.2.2)
    gitCurrentTag = 'git describe --tags --abbrev=0'.execute([], project.rootDir).text.trim()

    //代码库类型
    repoType = "git"
    //版本号
    revision = gitCommitCount
    //提交次数
    commitCount = gitCommitCount

    //当前包名
    packName = "this is test"
    //---------------------------------------------------------------------------------------------

    //自动化打包需要用到的函数
    isInBamboo =  {
        if (System.getenv()['bamboo_agentId']) {
            return true
        }

        return false
    }

    isInJenkins =  {

        //   检查  gradle.properties  中有没有设置JENKINS_BUILD_SERVER
        if (project.hasProperty('JENKINS_BUILD_SERVER')) {
            return true
        }

        return false
    }

/**
 * 获取Jenkins Build 号
 * @return
 */
    getBuildCode =  {
        ext.env = System.getenv()
        if (isInBamboo()) {
            ext.buildNumber = env.bamboo_buildNumber?.toInteger()
            return "$buildNumber"
        } else if (isInJenkins()) {
            ext.buildNumber = env.BUILD_NUMBER?.toInteger()
            return "$buildNumber"
        } else {
            String selfBuildName = env.get("USERNAME")
            if (selfBuildName == null) {
                selfBuildName = env.get("COMPUTERNAME")

                if (selfBuildName == null) {
                    selfBuildName = "UNKNOWN"
                }
            }
            return selfBuildName
        }
    }

    //-----------------------------------------------------------------------------------------------------------------------





    //app版本号
    androidVersion = [
//            applicationId:"com.sharkgulf.blueshark",
            applicationId:"com.sharkgulf.soloera",
            compileSdkVersion:29,
            minSdkVersion : 21,
            targetSdkVersion : 28,
            versionCode:gitCommitCount,
            versionName : "1.0.0"
    ]

    //依赖 android suppory包版本
    supportLibraryVersion = "28.0.0"



    //基本依赖
    supporCompiles = [
            "v7": 'androidx.appcompat:appcompat:1.0.0',
            "cardview":"com.android.support:cardview-v7:${supportLibraryVersion}",
            "design":"com.android.support:design:${supportLibraryVersion}",
            "recyclerview": 'androidx.recyclerview:recyclerview:1.0.0'
    ]



    //输出自动化打包的版本
    //-----------------------------------------------------------
    setGlobalBuildEnvs = {
        println('setGlobalBuildEnvs')
        tag_name = "${android.defaultConfig.versionName}_${getBuildCode}"
        lastchangerev = "${gitCommitCount}"
        f = new File("set_env.bat")
        f.write("SET last_build_tag=${tag_name}\r\nSET last_git_revsion=${lastchangerev}\r\n" +
                "SET revsion=${gitCommitShortHash}\r\nSET version_code=${gitCommitCount}\r\n")

        f2 = new File("set_env.sh")
        f2.write("#!/bin/bash\nexport last_build_tag=\"${tag_name}\"\nexport last_git_revsion=\"${lastchangerev}\"\r\n" +
                "export revsion=\"${gitCommitShortHash}\"\r\nexport version_code=\"${gitCommitCount}\"")
        println('f :'+f.getPath())
        println('f2 :'+f2.getPath())
        //f.close()
    }




}